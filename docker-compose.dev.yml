version: '3.8'

services:
  # Application service for development
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
      args:
        NODE_ENV: development
    container_name: deeper-bible-app
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "9229:9229" # Node.js debugger port
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-deeper_bible_secure_2024}@postgres:5432/deeper_bible
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-development_jwt_secret_key_2024}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      LOG_LEVEL: ${LOG_LEVEL:-debug}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
    volumes:
      - ./src:/app/src
      - ./backend:/app/backend
      - ./database:/app/database
      - ./api:/app/api
      - ./tests:/app/tests
      - ./package.json:/app/package.json
      - ./tsconfig.json:/app/tsconfig.json
      - app_node_modules:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - deeper-bible-network
    command: npm run dev

  # Main PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: deeper-bible-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-deeper_bible_secure_2024}
      POSTGRES_DB: deeper_bible
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d deeper_bible"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - deeper-bible-network
    command: >
      postgres
      -c shared_buffers=256MB
      -c max_connections=200
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # Test PostgreSQL database
  postgres-test:
    image: postgres:15-alpine
    container_name: deeper-bible-postgres-test
    restart: unless-stopped
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: deeper_bible_test
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d deeper_bible_test"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - deeper-bible-network
    profiles:
      - test

  # Redis cache service
  redis:
    image: redis:7-alpine
    container_name: deeper-bible-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD:-redis_secure_password_2024}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_secure_password_2024}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - deeper-bible-network

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: deeper-bible-pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@deeperbible.com
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin_password}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - deeper-bible-network
    profiles:
      - tools

  # Mailhog for email testing in development
  mailhog:
    image: mailhog/mailhog:latest
    container_name: deeper-bible-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025" # SMTP server
      - "8025:8025" # Web UI
    networks:
      - deeper-bible-network
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  postgres_test_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  app_node_modules:
    driver: local

networks:
  deeper-bible-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16