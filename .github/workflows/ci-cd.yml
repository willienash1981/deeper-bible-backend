name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Environment Validation
  env-validation:
    name: Environment Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate environment configuration
        run: |
          echo "Validating environment configuration files..."
          
          # Check if .env.example exists and has required variables
          if [ ! -f ".env.example" ]; then
            echo "❌ .env.example file not found"
            exit 1
          fi
          
          # Define required environment variables
          required_vars=(
            "NODE_ENV"
            "PORT"
            "DATABASE_URL"
            "REDIS_URL"
            "JWT_SECRET"
            "OPENAI_API_KEY"
          )
          
          # Check each required variable exists in .env.example
          missing_vars=()
          for var in "${required_vars[@]}"; do
            if ! grep -q "^$var=" .env.example; then
              missing_vars+=("$var")
            fi
          done
          
          if [ ${#missing_vars[@]} -ne 0 ]; then
            echo "❌ Missing required environment variables in .env.example:"
            printf '%s\n' "${missing_vars[@]}"
            exit 1
          fi
          
          echo "✅ All required environment variables found in .env.example"
          
          # Validate no secrets in .env.example
          if grep -E "(password|secret|key).*=.*[^_example]$" .env.example | grep -v "your_"; then
            echo "❌ Potential secrets found in .env.example (should use placeholder values)"
            exit 1
          fi
          
          echo "✅ No hardcoded secrets found in .env.example"

      - name: Validate deployment environment variables
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: |
          echo "Validating deployment environment variables..."
          
          # Check critical secrets are available
          critical_secrets=(
            "RENDER_API_KEY"
            "DATABASE_URL"
            "JWT_SECRET"
            "OPENAI_API_KEY"
          )
          
          missing_secrets=()
          for secret in "${critical_secrets[@]}"; do
            if [ -z "${!secret}" ]; then
              missing_secrets+=("$secret")
            fi
          done
          
          if [ ${#missing_secrets[@]} -ne 0 ]; then
            echo "⚠️ Missing deployment secrets (will be checked in deployment job):"
            printf '%s\n' "${missing_secrets[@]}"
          else
            echo "✅ Critical deployment secrets are available"
          fi
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

  # Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: [env-validation]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint || echo "No lint script found"

      - name: Run TypeScript type check
        run: npm run type-check || npx tsc --noEmit

      - name: Check for security vulnerabilities
        run: npm audit --audit-level=moderate

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [env-validation]
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: deeper_bible_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/deeper_bible_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
          JWT_SECRET: test_jwt_secret
        run: npm test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quality, test]
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: deeper_bible_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/deeper_bible_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
          JWT_SECRET: test_jwt_secret
        run: npm run test:e2e || npm run test:integration || echo "No integration tests found"

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

  # Build Docker Image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, integration]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.deeperbible.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate staging deployment prerequisites
        run: |
          echo "Validating staging deployment prerequisites..."
          
          # Check required secrets
          if [ -z "$RENDER_API_KEY" ]; then
            echo "❌ RENDER_API_KEY secret not found"
            exit 1
          fi
          
          if [ -z "$RENDER_STAGING_SERVICE_ID" ]; then
            echo "❌ RENDER_STAGING_SERVICE_ID secret not found"
            exit 1
          fi
          
          echo "✅ Staging deployment prerequisites validated"
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_STAGING_SERVICE_ID: ${{ secrets.RENDER_STAGING_SERVICE_ID }}

      - name: Deploy to Render Staging
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_STAGING_SERVICE_ID }}
        run: |
          curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys"

      - name: Wait for deployment
        run: sleep 60

      - name: Health check
        run: |
          for i in {1..10}; do
            if curl -f https://staging.deeperbible.com/health; then
              echo "Health check passed"
              exit 0
            fi
            echo "Attempt $i failed, waiting..."
            sleep 30
          done
          echo "Health check failed"
          exit 1

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.deeperbible.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate production deployment prerequisites
        run: |
          echo "Validating production deployment prerequisites..."
          
          # Check required secrets
          if [ -z "$RENDER_API_KEY" ]; then
            echo "❌ RENDER_API_KEY secret not found"
            exit 1
          fi
          
          if [ -z "$RENDER_PRODUCTION_SERVICE_ID" ]; then
            echo "❌ RENDER_PRODUCTION_SERVICE_ID secret not found"
            exit 1
          fi
          
          # Validate staging is healthy before production deployment
          echo "Checking staging health before production deployment..."
          staging_health=$(curl -f -s https://staging.deeperbible.com/health || echo "unhealthy")
          if [[ "$staging_health" != *"healthy"* ]]; then
            echo "❌ Staging environment is not healthy, aborting production deployment"
            exit 1
          fi
          
          echo "✅ Production deployment prerequisites validated"
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_PRODUCTION_SERVICE_ID: ${{ secrets.RENDER_PRODUCTION_SERVICE_ID }}

      - name: Create deployment
        uses: actions/github-script@v7
        id: deployment
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              auto_merge: false,
              required_contexts: [],
              description: 'Production deployment'
            });
            return deployment.data.id;

      - name: Deploy to Render Production
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_PRODUCTION_SERVICE_ID }}
        run: |
          curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys"

      - name: Wait for deployment
        run: sleep 90

      - name: Health check
        id: health_check
        run: |
          for i in {1..15}; do
            if curl -f https://api.deeperbible.com/health; then
              echo "Health check passed"
              exit 0
            fi
            echo "Attempt $i failed, waiting..."
            sleep 30
          done
          echo "Health check failed"
          exit 1

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: '${{ steps.health_check.outcome }}' === 'success' ? 'success' : 'failure',
              environment_url: 'https://api.deeperbible.com',
              description: '${{ steps.health_check.outcome }}' === 'success' ? 'Deployment successful' : 'Deployment failed'
            });

      - name: Notify team
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Production Deployment ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true