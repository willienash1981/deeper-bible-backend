openapi: 3.0.0
info:
  title: Deeper Bible API
  version: 1.0.0
  description: |
    Comprehensive API for AI-powered biblical analysis and theological insights.
    
    ## Features
    - Multi-provider Bible data access
    - AI-powered verse analysis with theological perspectives
    - Symbol detection and relationship mapping
    - User authentication and profile management
    - Analytics and usage tracking
    - Advanced caching for optimal performance
    
    ## Authentication
    This API uses JWT Bearer tokens for authentication. Obtain a token by logging in via `/auth/login`.
    
    ## Rate Limiting
    - **Free users**: 100 requests per hour
    - **Premium users**: 1000 requests per hour
    - **Enterprise**: Unlimited
    
    ## Error Handling
    All errors follow RFC 7807 format with detailed error messages and codes.
  contact:
    name: Deeper Bible Support
    email: support@deeperbible.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://api-staging.deeperbible.com/api
    description: Staging server
  - url: https://api.deeperbible.com/api
    description: Production server

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Users
    description: User profile management and settings
  - name: Analysis
    description: Biblical verse analysis with AI insights
  - name: Symbols
    description: Symbol detection and relationship mapping
  - name: Analytics
    description: Usage analytics and insights
  - name: Health
    description: System health and monitoring

paths:
  # Health Check
  /health:
    get:
      summary: Health check endpoint
      description: Returns the current status of the API and its dependencies
      tags:
        - Health
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: "1.0.0"
                  dependencies:
                    type: object
                    properties:
                      database:
                        type: string
                        example: "connected"
                      redis:
                        type: string
                        example: "connected"
                      openai:
                        type: string
                        example: "available"

  # Authentication
  /auth/register:
    post:
      summary: Register a new user
      description: Create a new user account with email and password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: "SecurePassword123!"
                name:
                  type: string
                  example: "John Doe"
            examples:
              basic_registration:
                summary: Basic registration
                value:
                  email: "john@example.com"
                  password: "SecurePassword123!"
                  name: "John Doe"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully"
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "CONFLICT"
                message: "User with this email already exists"

  /auth/login:
    post:
      summary: Log in a user
      description: Authenticate user and return JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  example: "SecurePassword123!"
            examples:
              login_example:
                summary: User login
                value:
                  email: "john@example.com"
                  password: "SecurePassword123!"
      responses:
        '200':
          description: User logged in successfully
          headers:
            X-New-Access-Token:
              schema:
                type: string
              description: New access token if refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  refreshToken:
                    type: string
                    example: "refresh_token_here"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/refresh:
    post:
      summary: Refresh access token
      description: Get new access token using refresh token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: "refresh_token_here"
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Users
  /users/profile:
    get:
      summary: Get user profile
      description: Retrieve the current user's profile information
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
    put:
      summary: Update user profile
      description: Update the current user's profile information
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
                preferences:
                  type: object
                  properties:
                    defaultTranslation:
                      type: string
                      example: "ESV"
                    enableNotifications:
                      type: boolean
                      example: true
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile updated successfully"
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '400':
          $ref: '#/components/responses/BadRequest'
    delete:
      summary: Delete user account
      description: Permanently delete the current user's account
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User account deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Analysis
  /analysis:
    post:
      summary: Analyze biblical text
      description: |
        Perform AI-powered analysis of biblical verses or passages.
        Supports multiple analysis types including theological, historical, and symbolic analysis.
      tags:
        - Analysis
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - verse_range
              properties:
                verse_range:
                  type: string
                  description: Bible verse reference (e.g., "John 3:16" or "Matthew 5:1-12")
                  example: "John 3:16"
                translation:
                  type: string
                  description: Bible translation code
                  default: "ESV"
                  enum: ["ESV", "KJV", "NIV", "NASB", "NLT", "NKJV"]
                  example: "ESV"
                analysis_type:
                  type: array
                  description: Types of analysis to perform
                  items:
                    type: string
                    enum: ["theological", "historical", "symbolic", "cross_reference"]
                  default: ["theological"]
                  example: ["theological", "symbolic"]
                denomination:
                  type: string
                  description: Denominational perspective for analysis
                  enum: ["protestant", "catholic", "orthodox", "pentecostal", "reformed", "lutheran"]
                  example: "protestant"
                include_symbols:
                  type: boolean
                  description: Whether to include symbol detection
                  default: true
                  example: true
            examples:
              basic_analysis:
                summary: Basic theological analysis
                value:
                  verse_range: "John 3:16"
                  translation: "ESV"
                  analysis_type: ["theological"]
              comprehensive_analysis:
                summary: Comprehensive analysis with symbols
                value:
                  verse_range: "Revelation 1:8"
                  translation: "ESV"
                  analysis_type: ["theological", "historical", "symbolic"]
                  denomination: "protestant"
                  include_symbols: true
      responses:
        '200':
          description: Analysis completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/TooManyRequests'

  /analysis/history:
    get:
      summary: Get analysis history
      description: Retrieve user's analysis history with pagination
      tags:
        - Analysis
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Analysis history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  analyses:
                    type: array
                    items:
                      $ref: '#/components/schemas/AnalysisResult'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  # Symbols
  /symbols/detect:
    post:
      summary: Detect symbols in text
      description: Identify biblical symbols and their meanings in given text
      tags:
        - Symbols
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
                  description: Text to analyze for symbols
                  example: "The lamb stood before the throne with seven seals"
                context:
                  type: string
                  description: Additional context for symbol interpretation
                  example: "Revelation 5"
      responses:
        '200':
          description: Symbols detected successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  symbols:
                    type: array
                    items:
                      $ref: '#/components/schemas/Symbol'

  /symbols/relationships:
    get:
      summary: Get symbol relationships
      description: Retrieve relationships between different biblical symbols
      tags:
        - Symbols
      security:
        - bearerAuth: []
      parameters:
        - name: symbol
          in: query
          description: Symbol to find relationships for
          required: true
          schema:
            type: string
            example: "lamb"
      responses:
        '200':
          description: Symbol relationships retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  symbol:
                    type: string
                    example: "lamb"
                  relationships:
                    type: array
                    items:
                      $ref: '#/components/schemas/SymbolRelationship'

  # Analytics
  /analytics/usage:
    get:
      summary: Get usage analytics
      description: Retrieve user's API usage statistics
      tags:
        - Analytics
      security:
        - bearerAuth: []
      parameters:
        - name: period
          in: query
          description: Time period for analytics
          schema:
            type: string
            enum: ["day", "week", "month", "year"]
            default: "month"
      responses:
        '200':
          description: Usage analytics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageAnalytics'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          example: "user@example.com"
        name:
          type: string
          example: "John Doe"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        preferences:
          type: object
          properties:
            defaultTranslation:
              type: string
              example: "ESV"
            enableNotifications:
              type: boolean
              example: true

    AnalysisResult:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "analysis-123"
        verse_range:
          type: string
          example: "John 3:16"
        translation:
          type: string
          example: "ESV"
        text:
          type: string
          example: "For God so loved the world..."
        analysis:
          type: object
          properties:
            theological:
              $ref: '#/components/schemas/TheologicalAnalysis'
            historical:
              $ref: '#/components/schemas/HistoricalAnalysis'
            symbolic:
              $ref: '#/components/schemas/SymbolicAnalysis'
        symbols:
          type: array
          items:
            $ref: '#/components/schemas/Symbol'
        cross_references:
          type: array
          items:
            $ref: '#/components/schemas/CrossReference'
        confidence_score:
          type: number
          minimum: 0
          maximum: 1
          example: 0.85
        processing_time_ms:
          type: integer
          example: 1250
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    TheologicalAnalysis:
      type: object
      properties:
        themes:
          type: array
          items:
            type: string
          example: ["salvation", "grace", "love"]
        doctrines:
          type: array
          items:
            type: string
          example: ["justification", "redemption"]
        interpretation:
          type: string
          example: "This verse emphasizes God's love and the gift of salvation..."
        denominational_perspectives:
          type: object
          additionalProperties:
            type: string

    HistoricalAnalysis:
      type: object
      properties:
        context:
          type: string
          example: "Written during the first century AD..."
        cultural_background:
          type: string
          example: "The Jewish cultural context of the time..."
        historical_significance:
          type: string
          example: "This passage was significant because..."

    SymbolicAnalysis:
      type: object
      properties:
        symbols_found:
          type: array
          items:
            $ref: '#/components/schemas/Symbol'
        interpretation:
          type: string
          example: "The symbolic meaning reveals..."

    Symbol:
      type: object
      properties:
        name:
          type: string
          example: "lamb"
        meaning:
          type: string
          example: "Represents sacrifice and innocence"
        biblical_context:
          type: string
          example: "Used throughout scripture to represent..."
        occurrences:
          type: integer
          example: 23
        related_verses:
          type: array
          items:
            type: string
          example: ["Revelation 5:6", "John 1:29"]

    SymbolRelationship:
      type: object
      properties:
        related_symbol:
          type: string
          example: "shepherd"
        relationship_type:
          type: string
          enum: ["complementary", "contrasting", "hierarchical"]
          example: "complementary"
        strength:
          type: number
          minimum: 0
          maximum: 1
          example: 0.9
        description:
          type: string
          example: "The lamb and shepherd represent the dual nature..."

    CrossReference:
      type: object
      properties:
        verse:
          type: string
          example: "Romans 3:23"
        text:
          type: string
          example: "for all have sinned and fall short..."
        relevance_score:
          type: number
          minimum: 0
          maximum: 1
          example: 0.75
        connection_type:
          type: string
          enum: ["thematic", "linguistic", "prophetic"]
          example: "thematic"

    UsageAnalytics:
      type: object
      properties:
        period:
          type: string
          example: "month"
        total_requests:
          type: integer
          example: 245
        successful_requests:
          type: integer
          example: 240
        error_rate:
          type: number
          example: 0.02
        average_response_time:
          type: number
          example: 1.25
        most_analyzed_books:
          type: array
          items:
            type: object
            properties:
              book:
                type: string
                example: "John"
              count:
                type: integer
                example: 45

    Pagination:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        total_pages:
          type: integer
          example: 10
        total_items:
          type: integer
          example: 200
        items_per_page:
          type: integer
          example: 20

    Error:
      type: object
      properties:
        error:
          type: string
          example: "VALIDATION_ERROR"
        message:
          type: string
          example: "Invalid verse reference format"
        details:
          type: object
          additionalProperties: true

  responses:
    BadRequest:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "VALIDATION_ERROR"
            message: "Invalid verse reference format"

    Unauthorized:
      description: Authentication required or invalid token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "UNAUTHORIZED"
            message: "Valid authentication token required"

    TooManyRequests:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "RATE_LIMIT_EXCEEDED"
            message: "Too many requests. Please try again later."
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
          description: Request limit per hour
        X-RateLimit-Remaining:
          schema:
            type: integer
          description: Remaining requests in current window
        X-RateLimit-Reset:
          schema:
            type: integer
          description: Time when rate limit resets (Unix timestamp)