import { LLMCacheService } from './llm-cache.service';

export class AnalysisCache {
  private llmCacheService: LLMCacheService;

  constructor() {
    this.llmCacheService = new LLMCacheService();
  }

  /**
   * Generates a consistent cache key for a given verse range, prompt version, and analysis type.
   * @param verseRange The user-provided verse range (e.g., "Revelation 2:17", "Matthew 5:3-8").
   * @param promptVersion The version of the prompt used to generate the analysis (e.g., "discovery_v1.3.2").
   * @param analysisType The type of analysis (e.g., "full_discovery", "symbolic_focus").
   * @returns A normalized cache key string.
   */
  public generateCacheKey(verseRange: string, promptVersion: string, analysisType: string = 'full_discovery'): string {
    const normalizedRange = this.normalizeVerseRange(verseRange);
    return `${normalizedRange}_${prompt_version}_${analysisType}`;
  }

  /**
   * Normalizes a verse range string for consistent cache key generation.
   * Converts to lowercase, replaces spaces and non-alphanumeric characters with underscores,
   * and handles common book name variations.
   * @param range The verse range string.
   * @returns A normalized string.
   */
  private normalizeVerseRange(range: string): string {
    // Basic normalization: lowercase, replace spaces/non-alphanumeric with underscore
    let normalized = range.toLowerCase().replace(/[^a-z0-9]+/g, '_');

    // Handle common book name variations (e.g., "1 corinthians" -> "1_corinthians")
    normalized = normalized.replace(/^(\d)_/, '$1_'); // For "1_corinthians" etc.

    return normalized;
  }

  /**
   * Stores an analysis in the cache.
   * @param key The cache key generated by generateCacheKey.
   * @param analysisContent The XML content of the analysis.
   * @param ttlSeconds Time-to-live for the cache entry in seconds.
   */
  async setAnalysis(key: string, analysisContent: string, ttlSeconds?: number): Promise<void> {
    await this.llmCacheService.set(key, analysisContent, ttlSeconds);
  }

  /**
   * Retrieves an analysis from the cache.
   * @param key The cache key generated by generateCacheKey.
   * @returns The XML content of the analysis, or null if not found.
   */
  async getAnalysis(key: string): Promise<string | null> {
    return this.llmCacheService.get(key);
  }

  /**
   * Deletes an analysis from the cache.
   * @param key The cache key.
   */
  async deleteAnalysis(key: string): Promise<void> {
    await this.llmCacheService.del(key);
  }

  /**
   * Checks if an analysis exists in the cache.
   * @param key The cache key.
   * @returns True if the analysis exists, false otherwise.
   */
  async analysisExists(key: string): Promise<boolean> {
    return this.llmCacheService.exists(key);
  }
}